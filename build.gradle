plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

group 'ru.brainrtp'
version '3.0'

// without "/" on the end
def serverDir = "/Users/mac/Desktop/spigat/plugins"

repositories {
    maven { url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
    maven { url 'https://repo.extendedclip.com/content/repositories/placeholderapi/' }
    maven { url 'https://jitpack.io' }
    maven { url 'https://repo.dmulloy2.net/repository/public/' }
    maven { url 'https://libraries.minecraft.net/' }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://repo.aikar.co/content/groups/aikar/' }
    mavenCentral()
    mavenLocal()
}

dependencies {
    // local
    compileOnly 'org.spigot:spigot:1.17.1'
    compileOnly fileTree(dir: 'libs', include: '*.jar')

    implementation 'io.sentry:sentry:6.4.1'
    implementation "co.aikar:acf-paper:0.5.1-SNAPSHOT"
    implementation 'org.bstats:bstats-bukkit:3.0.0'

    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    compileOnly 'org.spongepowered:configurate-hocon:4.1.2'
//    implementation 'ru.progrm-jarvis.minecraft:fake-entity-lib:1.0.0-SNAPSHOT'

    implementation 'com.github.juliarn:npc-lib:2.6-RELEASE'

    compileOnly 'com.zaxxer:HikariCP:5.0.1'

    compileOnly 'mysql:mysql-connector-java:8.0.28'

    compileOnly 'org.spigotmc:plugin-annotations:1.2.3-SNAPSHOT'
    annotationProcessor 'org.spigotmc:plugin-annotations:1.2.3-SNAPSHOT'

    compileOnly 'me.clip:placeholderapi:2.11.2'

    compileOnly 'com.github.MilkBowl:VaultAPI:1.7.1'

    compileOnly 'com.comphenix.protocol:ProtocolLib:4.8.0'
}

compileJava {
    options.compilerArgs += ["-parameters"]
    options.fork = true
    options.forkOptions.executable = 'javac'
}

def getIncrementVersion() {
    def versionPropsFile = file('version.properties')

    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))
        def major = versionProps['VERSION_MAJOR']
        def minor = versionProps['VERSION_MINOR']
        def patch = versionProps['VERSION_PATCH'].toInteger() + 1
        def version = major + "." + minor + "." + patch

        versionProps['VERSION_PATCH'] = patch.toString()
        versionProps.store(versionPropsFile.newWriter(), null)

        println sprintf("Building version: " + version)
        return version

    } else {
        throw new GradleException("Could not read version.properties!")
    }
}

def getDecrementVersion() {
    def versionPropsFile = file('version.properties')

    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))
        def major = versionProps['VERSION_MAJOR']
        def minor = versionProps['VERSION_MINOR']
        def patch = versionProps['VERSION_PATCH'].toInteger() - 1
        def version = major + "." + minor + "." + patch

        versionProps.store(versionPropsFile.newWriter(), null)

        return version

    } else {
        throw new GradleException("Could not read version.properties!")
    }
}

shadowJar {
    minimize()
    relocate 'co.aikar.commands', 'ru.brainrtp.eastereggs.acf'
    relocate 'co.aikar.locales', 'ru.brainrtp.eastereggs.locales'
    relocate "org.bstats", "ru.brainrtp.eastereggs.metrics"
    def version = getIncrementVersion()
    rootProject.version = version
}

task buildAndCopyJar {
    dependsOn(compileJava)
    dependsOn(tasks.jar)
    dependsOn(test)
    dependsOn(shadowJar)
    def previousVersion = getDecrementVersion()

    doLast {
        copy {
            from "$projectDir/build/libs/$rootProject.name-$rootProject.version-all.jar"
            into "$serverDir"
        }
        delete "$serverDir/$rootProject.name-$previousVersion-all.jar"
        delete "$projectDir/build/libs/$rootProject.name-$previousVersion-all.jar"
        delete "$projectDir/build/libs/$rootProject.name-${previousVersion}.jar"
    }
}

test {
    useJUnitPlatform()

    afterTest { desc, result ->
        logger.quiet "Executing test '${desc.displayName}' [${desc.name}] with result: ${result.resultType}"
    }
}
